// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protostuff

package game.module.activity.bean;


import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

import io.protostuff.UninitializedMessageException;
public final class Answer implements Externalizable, Message<Answer>
{

    public static Schema<Answer> getSchema()
    {
        return SCHEMA;
    }

    public static Answer getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final Answer DEFAULT_INSTANCE = new Answer();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    Integer answerId;
    Integer answerState;
    Integer playerChoose;

    public Answer()
    {

    }

    public Answer(
        Integer answerId,
        Integer answerState,
        Integer playerChoose
    )
    {
        this.answerId = answerId;
        this.answerState = answerState;
        this.playerChoose = playerChoose;
    }

    // getters and setters

    // answerId

    public Integer getAnswerId()
    {
        return answerId;
    }


    public void setAnswerId(Integer answerId)
    {
        this.answerId = answerId;
    }

    // answerState

    public Integer getAnswerState()
    {
        return answerState;
    }


    public void setAnswerState(Integer answerState)
    {
        this.answerState = answerState;
    }

    // playerChoose

    public Integer getPlayerChoose()
    {
        return playerChoose;
    }


    public void setPlayerChoose(Integer playerChoose)
    {
        this.playerChoose = playerChoose;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<Answer> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<Answer> SCHEMA = new Schema<Answer>()
    {
        // schema methods

        public Answer newMessage()
        {
            return new Answer();
        }

        public Class<Answer> typeClass()
        {
            return Answer.class;
        }

        public String messageName()
        {
            return Answer.class.getSimpleName();
        }

        public String messageFullName()
        {
            return Answer.class.getName();
        }

        public boolean isInitialized(Answer message)
        {
            return 
                message.answerId != null 
                && message.answerState != null 
                && message.playerChoose != null;
        }

        public void mergeFrom(Input input, Answer message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.answerId = input.readInt32();
                        break;
                    case 2:
                        message.answerState = input.readInt32();
                        break;
                    case 3:
                        message.playerChoose = input.readInt32();
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, Answer message) throws IOException
        {
            if(message.answerId == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(1, message.answerId, false);

            if(message.answerState == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(2, message.answerState, false);

            if(message.playerChoose == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(3, message.playerChoose, false);
        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "answerId";
                case 2: return "answerState";
                case 3: return "playerChoose";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("answerId", 1);
            fieldMap.put("answerState", 2);
            fieldMap.put("playerChoose", 3);
        }
    };
    
}
