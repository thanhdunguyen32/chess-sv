// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protostuff

package game.module.activity.bean;


import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

import io.protostuff.UninitializedMessageException;
public final class DBActivityAnswerAward implements Externalizable, Message<DBActivityAnswerAward>
{

    public static Schema<DBActivityAnswerAward> getSchema()
    {
        return SCHEMA;
    }

    public static DBActivityAnswerAward getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final DBActivityAnswerAward DEFAULT_INSTANCE = new DBActivityAnswerAward();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    Integer totalAnswerCnt;
    Integer totalAwardAnswerCnt;
    Integer openTime;
    Integer closeTime;

    public DBActivityAnswerAward()
    {

    }

    public DBActivityAnswerAward(
        Integer totalAnswerCnt,
        Integer totalAwardAnswerCnt,
        Integer openTime,
        Integer closeTime
    )
    {
        this.totalAnswerCnt = totalAnswerCnt;
        this.totalAwardAnswerCnt = totalAwardAnswerCnt;
        this.openTime = openTime;
        this.closeTime = closeTime;
    }

    // getters and setters

    // totalAnswerCnt

    public Integer getTotalAnswerCnt()
    {
        return totalAnswerCnt;
    }


    public void setTotalAnswerCnt(Integer totalAnswerCnt)
    {
        this.totalAnswerCnt = totalAnswerCnt;
    }

    // totalAwardAnswerCnt

    public Integer getTotalAwardAnswerCnt()
    {
        return totalAwardAnswerCnt;
    }


    public void setTotalAwardAnswerCnt(Integer totalAwardAnswerCnt)
    {
        this.totalAwardAnswerCnt = totalAwardAnswerCnt;
    }

    // openTime

    public Integer getOpenTime()
    {
        return openTime;
    }


    public void setOpenTime(Integer openTime)
    {
        this.openTime = openTime;
    }

    // closeTime

    public Integer getCloseTime()
    {
        return closeTime;
    }


    public void setCloseTime(Integer closeTime)
    {
        this.closeTime = closeTime;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<DBActivityAnswerAward> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<DBActivityAnswerAward> SCHEMA = new Schema<DBActivityAnswerAward>()
    {
        // schema methods

        public DBActivityAnswerAward newMessage()
        {
            return new DBActivityAnswerAward();
        }

        public Class<DBActivityAnswerAward> typeClass()
        {
            return DBActivityAnswerAward.class;
        }

        public String messageName()
        {
            return DBActivityAnswerAward.class.getSimpleName();
        }

        public String messageFullName()
        {
            return DBActivityAnswerAward.class.getName();
        }

        public boolean isInitialized(DBActivityAnswerAward message)
        {
            return 
                message.totalAnswerCnt != null 
                && message.totalAwardAnswerCnt != null 
                && message.openTime != null 
                && message.closeTime != null;
        }

        public void mergeFrom(Input input, DBActivityAnswerAward message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.totalAnswerCnt = input.readInt32();
                        break;
                    case 2:
                        message.totalAwardAnswerCnt = input.readInt32();
                        break;
                    case 3:
                        message.openTime = input.readInt32();
                        break;
                    case 4:
                        message.closeTime = input.readInt32();
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, DBActivityAnswerAward message) throws IOException
        {
            if(message.totalAnswerCnt == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(1, message.totalAnswerCnt, false);

            if(message.totalAwardAnswerCnt == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(2, message.totalAwardAnswerCnt, false);

            if(message.openTime == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(3, message.openTime, false);

            if(message.closeTime == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(4, message.closeTime, false);
        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "totalAnswerCnt";
                case 2: return "totalAwardAnswerCnt";
                case 3: return "openTime";
                case 4: return "closeTime";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("totalAnswerCnt", 1);
            fieldMap.put("totalAwardAnswerCnt", 2);
            fieldMap.put("openTime", 3);
            fieldMap.put("closeTime", 4);
        }
    };
    
}
