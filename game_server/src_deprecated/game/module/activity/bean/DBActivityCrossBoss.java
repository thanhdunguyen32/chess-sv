// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protostuff

package game.module.activity.bean;


import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

import io.protostuff.UninitializedMessageException;
public final class DBActivityCrossBoss implements Externalizable, Message<DBActivityCrossBoss>
{

    public static Schema<DBActivityCrossBoss> getSchema()
    {
        return SCHEMA;
    }

    public static DBActivityCrossBoss getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final DBActivityCrossBoss DEFAULT_INSTANCE = new DBActivityCrossBoss();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    Integer startTimeMin;
    Integer endTimeMin;

    public DBActivityCrossBoss()
    {

    }

    public DBActivityCrossBoss(
        Integer startTimeMin,
        Integer endTimeMin
    )
    {
        this.startTimeMin = startTimeMin;
        this.endTimeMin = endTimeMin;
    }

    // getters and setters

    // startTimeMin

    public Integer getStartTimeMin()
    {
        return startTimeMin;
    }


    public void setStartTimeMin(Integer startTimeMin)
    {
        this.startTimeMin = startTimeMin;
    }

    // endTimeMin

    public Integer getEndTimeMin()
    {
        return endTimeMin;
    }


    public void setEndTimeMin(Integer endTimeMin)
    {
        this.endTimeMin = endTimeMin;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<DBActivityCrossBoss> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<DBActivityCrossBoss> SCHEMA = new Schema<DBActivityCrossBoss>()
    {
        // schema methods

        public DBActivityCrossBoss newMessage()
        {
            return new DBActivityCrossBoss();
        }

        public Class<DBActivityCrossBoss> typeClass()
        {
            return DBActivityCrossBoss.class;
        }

        public String messageName()
        {
            return DBActivityCrossBoss.class.getSimpleName();
        }

        public String messageFullName()
        {
            return DBActivityCrossBoss.class.getName();
        }

        public boolean isInitialized(DBActivityCrossBoss message)
        {
            return 
                message.startTimeMin != null 
                && message.endTimeMin != null;
        }

        public void mergeFrom(Input input, DBActivityCrossBoss message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.startTimeMin = input.readInt32();
                        break;
                    case 2:
                        message.endTimeMin = input.readInt32();
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, DBActivityCrossBoss message) throws IOException
        {
            if(message.startTimeMin == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(1, message.startTimeMin, false);

            if(message.endTimeMin == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(2, message.endTimeMin, false);
        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "startTimeMin";
                case 2: return "endTimeMin";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("startTimeMin", 1);
            fieldMap.put("endTimeMin", 2);
        }
    };
    
}
