// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protostuff

package game.module.battle.bean;


import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

import io.protostuff.UninitializedMessageException;
public final class DBArenaMember implements Externalizable, Message<DBArenaMember>
{

    public static Schema<DBArenaMember> getSchema()
    {
        return SCHEMA;
    }

    public static DBArenaMember getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final DBArenaMember DEFAULT_INSTANCE = new DBArenaMember();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    DB_ENEMY_TYPE memberType;
      DBArenaPlayer arenaPlayer;
      DBArenaRobot arenaRobot;

    public DBArenaMember()
    {

    }

    public DBArenaMember(
        DB_ENEMY_TYPE memberType
    )
    {
        this.memberType = memberType;
    }

    // getters and setters

    // memberType

    public DB_ENEMY_TYPE getMemberType()
    {
        return memberType;
    }


    public void setMemberType(DB_ENEMY_TYPE memberType)
    {
        this.memberType = memberType;
    }

    // arenaPlayer

    public DBArenaPlayer getArenaPlayer()
    {
        return arenaPlayer;
    }


    public void setArenaPlayer(DBArenaPlayer arenaPlayer)
    {
        this.arenaPlayer = arenaPlayer;
    }

    // arenaRobot

    public DBArenaRobot getArenaRobot()
    {
        return arenaRobot;
    }


    public void setArenaRobot(DBArenaRobot arenaRobot)
    {
        this.arenaRobot = arenaRobot;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<DBArenaMember> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<DBArenaMember> SCHEMA = new Schema<DBArenaMember>()
    {
        // schema methods

        public DBArenaMember newMessage()
        {
            return new DBArenaMember();
        }

        public Class<DBArenaMember> typeClass()
        {
            return DBArenaMember.class;
        }

        public String messageName()
        {
            return DBArenaMember.class.getSimpleName();
        }

        public String messageFullName()
        {
            return DBArenaMember.class.getName();
        }

        public boolean isInitialized(DBArenaMember message)
        {
            return 
                message.memberType != null;
        }

        public void mergeFrom(Input input, DBArenaMember message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.memberType = DB_ENEMY_TYPE.valueOf(input.readEnum());
                        break;

                    case 2:
                        message.arenaPlayer = input.mergeObject(message.arenaPlayer, DBArenaPlayer.getSchema());
                        break;

                    case 3:
                        message.arenaRobot = input.mergeObject(message.arenaRobot, DBArenaRobot.getSchema());
                        break;

                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, DBArenaMember message) throws IOException
        {
            if(message.memberType == null)
                throw new UninitializedMessageException(message);
            output.writeEnum(1, message.memberType.number, false);

            if(message.arenaPlayer != null)
                 output.writeObject(2, message.arenaPlayer, DBArenaPlayer.getSchema(), false);


            if(message.arenaRobot != null)
                 output.writeObject(3, message.arenaRobot, DBArenaRobot.getSchema(), false);

        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "memberType";
                case 2: return "arenaPlayer";
                case 3: return "arenaRobot";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("memberType", 1);
            fieldMap.put("arenaPlayer", 2);
            fieldMap.put("arenaRobot", 3);
        }
    };
    
}
