// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protostuff

package game.module.battle.bean;


import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

import io.protostuff.UninitializedMessageException;
public final class DBArenaPlayer implements Externalizable, Message<DBArenaPlayer>
{

    public static Schema<DBArenaPlayer> getSchema()
    {
        return SCHEMA;
    }

    public static DBArenaPlayer getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final DBArenaPlayer DEFAULT_INSTANCE = new DBArenaPlayer();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    Integer playerId;
    Boolean inBattle;

    public DBArenaPlayer()
    {

    }

    public DBArenaPlayer(
        Integer playerId,
        Boolean inBattle
    )
    {
        this.playerId = playerId;
        this.inBattle = inBattle;
    }

    // getters and setters

    // playerId

    public Integer getPlayerId()
    {
        return playerId;
    }


    public void setPlayerId(Integer playerId)
    {
        this.playerId = playerId;
    }

    // inBattle

    public Boolean getInBattle()
    {
        return inBattle;
    }


    public void setInBattle(Boolean inBattle)
    {
        this.inBattle = inBattle;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<DBArenaPlayer> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<DBArenaPlayer> SCHEMA = new Schema<DBArenaPlayer>()
    {
        // schema methods

        public DBArenaPlayer newMessage()
        {
            return new DBArenaPlayer();
        }

        public Class<DBArenaPlayer> typeClass()
        {
            return DBArenaPlayer.class;
        }

        public String messageName()
        {
            return DBArenaPlayer.class.getSimpleName();
        }

        public String messageFullName()
        {
            return DBArenaPlayer.class.getName();
        }

        public boolean isInitialized(DBArenaPlayer message)
        {
            return 
                message.playerId != null 
                && message.inBattle != null;
        }

        public void mergeFrom(Input input, DBArenaPlayer message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.playerId = input.readInt32();
                        break;
                    case 2:
                        message.inBattle = input.readBool();
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, DBArenaPlayer message) throws IOException
        {
            if(message.playerId == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(1, message.playerId, false);

            if(message.inBattle == null)
                throw new UninitializedMessageException(message);
            output.writeBool(2, message.inBattle, false);
        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "playerId";
                case 2: return "inBattle";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("playerId", 1);
            fieldMap.put("inBattle", 2);
        }
    };
    
}
