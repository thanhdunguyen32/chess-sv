// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protostuff

package game.module.battle.bean;


import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

import io.protostuff.UninitializedMessageException;
public final class DBArenaRecentBattle implements Externalizable, Message<DBArenaRecentBattle>
{

    public static Schema<DBArenaRecentBattle> getSchema()
    {
        return SCHEMA;
    }

    public static DBArenaRecentBattle getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final DBArenaRecentBattle DEFAULT_INSTANCE = new DBArenaRecentBattle();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    Boolean isWin;
    Integer positionChange;
    Boolean isAttacker;
    Integer targetPlayerId;
    Integer attackTime;

    public DBArenaRecentBattle()
    {

    }

    public DBArenaRecentBattle(
        Boolean isWin,
        Integer positionChange,
        Boolean isAttacker,
        Integer targetPlayerId,
        Integer attackTime
    )
    {
        this.isWin = isWin;
        this.positionChange = positionChange;
        this.isAttacker = isAttacker;
        this.targetPlayerId = targetPlayerId;
        this.attackTime = attackTime;
    }

    // getters and setters

    // isWin

    public Boolean getIsWin()
    {
        return isWin;
    }


    public void setIsWin(Boolean isWin)
    {
        this.isWin = isWin;
    }

    // positionChange

    public Integer getPositionChange()
    {
        return positionChange;
    }


    public void setPositionChange(Integer positionChange)
    {
        this.positionChange = positionChange;
    }

    // isAttacker

    public Boolean getIsAttacker()
    {
        return isAttacker;
    }


    public void setIsAttacker(Boolean isAttacker)
    {
        this.isAttacker = isAttacker;
    }

    // targetPlayerId

    public Integer getTargetPlayerId()
    {
        return targetPlayerId;
    }


    public void setTargetPlayerId(Integer targetPlayerId)
    {
        this.targetPlayerId = targetPlayerId;
    }

    // attackTime

    public Integer getAttackTime()
    {
        return attackTime;
    }


    public void setAttackTime(Integer attackTime)
    {
        this.attackTime = attackTime;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<DBArenaRecentBattle> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<DBArenaRecentBattle> SCHEMA = new Schema<DBArenaRecentBattle>()
    {
        // schema methods

        public DBArenaRecentBattle newMessage()
        {
            return new DBArenaRecentBattle();
        }

        public Class<DBArenaRecentBattle> typeClass()
        {
            return DBArenaRecentBattle.class;
        }

        public String messageName()
        {
            return DBArenaRecentBattle.class.getSimpleName();
        }

        public String messageFullName()
        {
            return DBArenaRecentBattle.class.getName();
        }

        public boolean isInitialized(DBArenaRecentBattle message)
        {
            return 
                message.isWin != null 
                && message.positionChange != null 
                && message.isAttacker != null 
                && message.targetPlayerId != null 
                && message.attackTime != null;
        }

        public void mergeFrom(Input input, DBArenaRecentBattle message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.isWin = input.readBool();
                        break;
                    case 2:
                        message.positionChange = input.readInt32();
                        break;
                    case 3:
                        message.isAttacker = input.readBool();
                        break;
                    case 4:
                        message.targetPlayerId = input.readInt32();
                        break;
                    case 5:
                        message.attackTime = input.readInt32();
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, DBArenaRecentBattle message) throws IOException
        {
            if(message.isWin == null)
                throw new UninitializedMessageException(message);
            output.writeBool(1, message.isWin, false);

            if(message.positionChange == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(2, message.positionChange, false);

            if(message.isAttacker == null)
                throw new UninitializedMessageException(message);
            output.writeBool(3, message.isAttacker, false);

            if(message.targetPlayerId == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(4, message.targetPlayerId, false);

            if(message.attackTime == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(5, message.attackTime, false);
        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "isWin";
                case 2: return "positionChange";
                case 3: return "isAttacker";
                case 4: return "targetPlayerId";
                case 5: return "attackTime";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("isWin", 1);
            fieldMap.put("positionChange", 2);
            fieldMap.put("isAttacker", 3);
            fieldMap.put("targetPlayerId", 4);
            fieldMap.put("attackTime", 5);
        }
    };
    
}
