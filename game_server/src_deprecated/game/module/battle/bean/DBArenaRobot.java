// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protostuff

package game.module.battle.bean;


import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

import io.protostuff.UninitializedMessageException;
public final class DBArenaRobot implements Externalizable, Message<DBArenaRobot>
{

    public static Schema<DBArenaRobot> getSchema()
    {
        return SCHEMA;
    }

    public static DBArenaRobot getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final DBArenaRobot DEFAULT_INSTANCE = new DBArenaRobot();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    Integer id;
    String name;
      Boolean inBattle;

    public DBArenaRobot()
    {

    }

    public DBArenaRobot(
        Integer id,
        String name
    )
    {
        this.id = id;
        this.name = name;
    }

    // getters and setters

    // id

    public Integer getId()
    {
        return id;
    }


    public void setId(Integer id)
    {
        this.id = id;
    }

    // name

    public String getName()
    {
        return name;
    }


    public void setName(String name)
    {
        this.name = name;
    }

    // inBattle

    public Boolean getInBattle()
    {
        return inBattle;
    }


    public void setInBattle(Boolean inBattle)
    {
        this.inBattle = inBattle;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<DBArenaRobot> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<DBArenaRobot> SCHEMA = new Schema<DBArenaRobot>()
    {
        // schema methods

        public DBArenaRobot newMessage()
        {
            return new DBArenaRobot();
        }

        public Class<DBArenaRobot> typeClass()
        {
            return DBArenaRobot.class;
        }

        public String messageName()
        {
            return DBArenaRobot.class.getSimpleName();
        }

        public String messageFullName()
        {
            return DBArenaRobot.class.getName();
        }

        public boolean isInitialized(DBArenaRobot message)
        {
            return 
                message.id != null 
                && message.name != null;
        }

        public void mergeFrom(Input input, DBArenaRobot message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.id = input.readInt32();
                        break;
                    case 2:
                        message.name = input.readString();
                        break;
                    case 3:
                        message.inBattle = input.readBool();
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, DBArenaRobot message) throws IOException
        {
            if(message.id == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(1, message.id, false);

            if(message.name == null)
                throw new UninitializedMessageException(message);
            output.writeString(2, message.name, false);

            if(message.inBattle != null)
                output.writeBool(3, message.inBattle, false);
        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "id";
                case 2: return "name";
                case 3: return "inBattle";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("id", 1);
            fieldMap.put("name", 2);
            fieldMap.put("inBattle", 3);
        }
    };
    
}
