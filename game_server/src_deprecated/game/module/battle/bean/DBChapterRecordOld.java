// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protostuff

package game.module.battle.bean;


import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

import io.protostuff.UninitializedMessageException;
public final class DBChapterRecordOld implements Externalizable, Message<DBChapterRecordOld>
{

    public static Schema<DBChapterRecordOld> getSchema()
    {
        return SCHEMA;
    }

    public static DBChapterRecordOld getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final DBChapterRecordOld DEFAULT_INSTANCE = new DBChapterRecordOld();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    Integer chapterId;
    List<DBStageRecord> stageList;
    List<Boolean> boxAward;

    public DBChapterRecordOld()
    {

    }

    public DBChapterRecordOld(
        Integer chapterId
    )
    {
        this.chapterId = chapterId;
    }

    // getters and setters

    // chapterId

    public Integer getChapterId()
    {
        return chapterId;
    }


    public void setChapterId(Integer chapterId)
    {
        this.chapterId = chapterId;
    }

    // stageList

    public List<DBStageRecord> getStageListList()
    {
        return stageList;
    }


    public void setStageListList(List<DBStageRecord> stageList)
    {
        this.stageList = stageList;
    }

    // boxAward

    public List<Boolean> getBoxAwardList()
    {
        return boxAward;
    }


    public void setBoxAwardList(List<Boolean> boxAward)
    {
        this.boxAward = boxAward;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<DBChapterRecordOld> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<DBChapterRecordOld> SCHEMA = new Schema<DBChapterRecordOld>()
    {
        // schema methods

        public DBChapterRecordOld newMessage()
        {
            return new DBChapterRecordOld();
        }

        public Class<DBChapterRecordOld> typeClass()
        {
            return DBChapterRecordOld.class;
        }

        public String messageName()
        {
            return DBChapterRecordOld.class.getSimpleName();
        }

        public String messageFullName()
        {
            return DBChapterRecordOld.class.getName();
        }

        public boolean isInitialized(DBChapterRecordOld message)
        {
            return 
                message.chapterId != null;
        }

        public void mergeFrom(Input input, DBChapterRecordOld message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.chapterId = input.readInt32();
                        break;
                    case 2:
                        if(message.stageList == null)
                            message.stageList = new ArrayList<DBStageRecord>();
                        message.stageList.add(input.mergeObject(null, DBStageRecord.getSchema()));
                        break;

                    case 3:
                        if(message.boxAward == null)
                            message.boxAward = new ArrayList<Boolean>();
                        message.boxAward.add(input.readBool());break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, DBChapterRecordOld message) throws IOException
        {
            if(message.chapterId == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(1, message.chapterId, false);

            if(message.stageList != null)
            {
                for(DBStageRecord stageList : message.stageList)
                {
                    if(stageList != null)
                        output.writeObject(2, stageList, DBStageRecord.getSchema(), true);
                }
            }


            if(message.boxAward != null)
            {
                for(Boolean boxAward : message.boxAward)
                {
                    if(boxAward != null)
                        output.writeBool(3, boxAward, true);
                }
            }
        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "chapterId";
                case 2: return "stageList";
                case 3: return "boxAward";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("chapterId", 1);
            fieldMap.put("stageList", 2);
            fieldMap.put("boxAward", 3);
        }
    };
    
}
