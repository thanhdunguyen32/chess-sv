// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protostuff

package game.module.battle.bean;


import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

import io.protostuff.UninitializedMessageException;
public final class DBCraftRecordItem implements Externalizable, Message<DBCraftRecordItem>
{

    public static Schema<DBCraftRecordItem> getSchema()
    {
        return SCHEMA;
    }

    public static DBCraftRecordItem getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final DBCraftRecordItem DEFAULT_INSTANCE = new DBCraftRecordItem();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    Boolean isWin;
    Integer battleTime;
    List<DBCraftRecordSide> oneSide;

    public DBCraftRecordItem()
    {

    }

    public DBCraftRecordItem(
        Boolean isWin,
        Integer battleTime
    )
    {
        this.isWin = isWin;
        this.battleTime = battleTime;
    }

    // getters and setters

    // isWin

    public Boolean getIsWin()
    {
        return isWin;
    }


    public void setIsWin(Boolean isWin)
    {
        this.isWin = isWin;
    }

    // battleTime

    public Integer getBattleTime()
    {
        return battleTime;
    }


    public void setBattleTime(Integer battleTime)
    {
        this.battleTime = battleTime;
    }

    // oneSide

    public List<DBCraftRecordSide> getOneSideList()
    {
        return oneSide;
    }


    public void setOneSideList(List<DBCraftRecordSide> oneSide)
    {
        this.oneSide = oneSide;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<DBCraftRecordItem> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<DBCraftRecordItem> SCHEMA = new Schema<DBCraftRecordItem>()
    {
        // schema methods

        public DBCraftRecordItem newMessage()
        {
            return new DBCraftRecordItem();
        }

        public Class<DBCraftRecordItem> typeClass()
        {
            return DBCraftRecordItem.class;
        }

        public String messageName()
        {
            return DBCraftRecordItem.class.getSimpleName();
        }

        public String messageFullName()
        {
            return DBCraftRecordItem.class.getName();
        }

        public boolean isInitialized(DBCraftRecordItem message)
        {
            return 
                message.isWin != null 
                && message.battleTime != null;
        }

        public void mergeFrom(Input input, DBCraftRecordItem message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.isWin = input.readBool();
                        break;
                    case 2:
                        message.battleTime = input.readInt32();
                        break;
                    case 3:
                        if(message.oneSide == null)
                            message.oneSide = new ArrayList<DBCraftRecordSide>();
                        message.oneSide.add(input.mergeObject(null, DBCraftRecordSide.getSchema()));
                        break;

                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, DBCraftRecordItem message) throws IOException
        {
            if(message.isWin == null)
                throw new UninitializedMessageException(message);
            output.writeBool(1, message.isWin, false);

            if(message.battleTime == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(2, message.battleTime, false);

            if(message.oneSide != null)
            {
                for(DBCraftRecordSide oneSide : message.oneSide)
                {
                    if(oneSide != null)
                        output.writeObject(3, oneSide, DBCraftRecordSide.getSchema(), true);
                }
            }

        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "isWin";
                case 2: return "battleTime";
                case 3: return "oneSide";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("isWin", 1);
            fieldMap.put("battleTime", 2);
            fieldMap.put("oneSide", 3);
        }
    };
    
}
