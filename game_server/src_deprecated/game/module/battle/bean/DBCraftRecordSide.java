// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protostuff

package game.module.battle.bean;


import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

import io.protostuff.UninitializedMessageException;
public final class DBCraftRecordSide implements Externalizable, Message<DBCraftRecordSide>
{

    public static Schema<DBCraftRecordSide> getSchema()
    {
        return SCHEMA;
    }

    public static DBCraftRecordSide getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final DBCraftRecordSide DEFAULT_INSTANCE = new DBCraftRecordSide();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    Integer playerId;
    Integer serverId;
    String playerName;
    Integer craftLevel;
    List<DBCraftRecordHero> heroInfo;

    public DBCraftRecordSide()
    {

    }

    public DBCraftRecordSide(
        Integer playerId,
        Integer serverId,
        String playerName,
        Integer craftLevel
    )
    {
        this.playerId = playerId;
        this.serverId = serverId;
        this.playerName = playerName;
        this.craftLevel = craftLevel;
    }

    // getters and setters

    // playerId

    public Integer getPlayerId()
    {
        return playerId;
    }


    public void setPlayerId(Integer playerId)
    {
        this.playerId = playerId;
    }

    // serverId

    public Integer getServerId()
    {
        return serverId;
    }


    public void setServerId(Integer serverId)
    {
        this.serverId = serverId;
    }

    // playerName

    public String getPlayerName()
    {
        return playerName;
    }


    public void setPlayerName(String playerName)
    {
        this.playerName = playerName;
    }

    // craftLevel

    public Integer getCraftLevel()
    {
        return craftLevel;
    }


    public void setCraftLevel(Integer craftLevel)
    {
        this.craftLevel = craftLevel;
    }

    // heroInfo

    public List<DBCraftRecordHero> getHeroInfoList()
    {
        return heroInfo;
    }


    public void setHeroInfoList(List<DBCraftRecordHero> heroInfo)
    {
        this.heroInfo = heroInfo;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<DBCraftRecordSide> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<DBCraftRecordSide> SCHEMA = new Schema<DBCraftRecordSide>()
    {
        // schema methods

        public DBCraftRecordSide newMessage()
        {
            return new DBCraftRecordSide();
        }

        public Class<DBCraftRecordSide> typeClass()
        {
            return DBCraftRecordSide.class;
        }

        public String messageName()
        {
            return DBCraftRecordSide.class.getSimpleName();
        }

        public String messageFullName()
        {
            return DBCraftRecordSide.class.getName();
        }

        public boolean isInitialized(DBCraftRecordSide message)
        {
            return 
                message.playerId != null 
                && message.serverId != null 
                && message.playerName != null 
                && message.craftLevel != null;
        }

        public void mergeFrom(Input input, DBCraftRecordSide message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.playerId = input.readInt32();
                        break;
                    case 2:
                        message.serverId = input.readInt32();
                        break;
                    case 3:
                        message.playerName = input.readString();
                        break;
                    case 4:
                        message.craftLevel = input.readInt32();
                        break;
                    case 5:
                        if(message.heroInfo == null)
                            message.heroInfo = new ArrayList<DBCraftRecordHero>();
                        message.heroInfo.add(input.mergeObject(null, DBCraftRecordHero.getSchema()));
                        break;

                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, DBCraftRecordSide message) throws IOException
        {
            if(message.playerId == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(1, message.playerId, false);

            if(message.serverId == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(2, message.serverId, false);

            if(message.playerName == null)
                throw new UninitializedMessageException(message);
            output.writeString(3, message.playerName, false);

            if(message.craftLevel == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(4, message.craftLevel, false);

            if(message.heroInfo != null)
            {
                for(DBCraftRecordHero heroInfo : message.heroInfo)
                {
                    if(heroInfo != null)
                        output.writeObject(5, heroInfo, DBCraftRecordHero.getSchema(), true);
                }
            }

        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "playerId";
                case 2: return "serverId";
                case 3: return "playerName";
                case 4: return "craftLevel";
                case 5: return "heroInfo";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("playerId", 1);
            fieldMap.put("serverId", 2);
            fieldMap.put("playerName", 3);
            fieldMap.put("craftLevel", 4);
            fieldMap.put("heroInfo", 5);
        }
    };
    
}
