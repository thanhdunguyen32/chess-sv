// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protostuff

package game.module.battle.bean;


import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

import io.protostuff.UninitializedMessageException;
public final class DBStageHeroList implements Externalizable, Message<DBStageHeroList>
{

    public static Schema<DBStageHeroList> getSchema()
    {
        return SCHEMA;
    }

    public static DBStageHeroList getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final DBStageHeroList DEFAULT_INSTANCE = new DBStageHeroList();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    Integer battleForce;
    List<DBStageHero> stageHero;

    public DBStageHeroList()
    {

    }

    public DBStageHeroList(
        Integer battleForce
    )
    {
        this.battleForce = battleForce;
    }

    // getters and setters

    // battleForce

    public Integer getBattleForce()
    {
        return battleForce;
    }


    public void setBattleForce(Integer battleForce)
    {
        this.battleForce = battleForce;
    }

    // stageHero

    public List<DBStageHero> getStageHeroList()
    {
        return stageHero;
    }


    public void setStageHeroList(List<DBStageHero> stageHero)
    {
        this.stageHero = stageHero;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<DBStageHeroList> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<DBStageHeroList> SCHEMA = new Schema<DBStageHeroList>()
    {
        // schema methods

        public DBStageHeroList newMessage()
        {
            return new DBStageHeroList();
        }

        public Class<DBStageHeroList> typeClass()
        {
            return DBStageHeroList.class;
        }

        public String messageName()
        {
            return DBStageHeroList.class.getSimpleName();
        }

        public String messageFullName()
        {
            return DBStageHeroList.class.getName();
        }

        public boolean isInitialized(DBStageHeroList message)
        {
            return 
                message.battleForce != null;
        }

        public void mergeFrom(Input input, DBStageHeroList message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.battleForce = input.readInt32();
                        break;
                    case 2:
                        if(message.stageHero == null)
                            message.stageHero = new ArrayList<DBStageHero>();
                        message.stageHero.add(input.mergeObject(null, DBStageHero.getSchema()));
                        break;

                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, DBStageHeroList message) throws IOException
        {
            if(message.battleForce == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(1, message.battleForce, false);

            if(message.stageHero != null)
            {
                for(DBStageHero stageHero : message.stageHero)
                {
                    if(stageHero != null)
                        output.writeObject(2, stageHero, DBStageHero.getSchema(), true);
                }
            }

        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "battleForce";
                case 2: return "stageHero";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("battleForce", 1);
            fieldMap.put("stageHero", 2);
        }
    };
    
}
