// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protostuff

package game.module.battle.bean;


import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

import io.protostuff.UninitializedMessageException;
public final class DBStageRecord implements Externalizable, Message<DBStageRecord>
{

    public static Schema<DBStageRecord> getSchema()
    {
        return SCHEMA;
    }

    public static DBStageRecord getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final DBStageRecord DEFAULT_INSTANCE = new DBStageRecord();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    Integer stageId;
       Integer star;
       Integer attackCount;
       Integer lastAttackTime;
       Integer resetCount;
       Integer lastResetTime;

    public DBStageRecord()
    {

    }

    public DBStageRecord(
        Integer stageId
    )
    {
        this.stageId = stageId;
    }

    // getters and setters

    // stageId

    public Integer getStageId()
    {
        return stageId;
    }


    public void setStageId(Integer stageId)
    {
        this.stageId = stageId;
    }

    // star

    public Integer getStar()
    {
        return star;
    }


    public void setStar(Integer star)
    {
        this.star = star;
    }

    // attackCount

    public Integer getAttackCount()
    {
        return attackCount;
    }


    public void setAttackCount(Integer attackCount)
    {
        this.attackCount = attackCount;
    }

    // lastAttackTime

    public Integer getLastAttackTime()
    {
        return lastAttackTime;
    }


    public void setLastAttackTime(Integer lastAttackTime)
    {
        this.lastAttackTime = lastAttackTime;
    }

    // resetCount

    public Integer getResetCount()
    {
        return resetCount;
    }


    public void setResetCount(Integer resetCount)
    {
        this.resetCount = resetCount;
    }

    // lastResetTime

    public Integer getLastResetTime()
    {
        return lastResetTime;
    }


    public void setLastResetTime(Integer lastResetTime)
    {
        this.lastResetTime = lastResetTime;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<DBStageRecord> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<DBStageRecord> SCHEMA = new Schema<DBStageRecord>()
    {
        // schema methods

        public DBStageRecord newMessage()
        {
            return new DBStageRecord();
        }

        public Class<DBStageRecord> typeClass()
        {
            return DBStageRecord.class;
        }

        public String messageName()
        {
            return DBStageRecord.class.getSimpleName();
        }

        public String messageFullName()
        {
            return DBStageRecord.class.getName();
        }

        public boolean isInitialized(DBStageRecord message)
        {
            return 
                message.stageId != null;
        }

        public void mergeFrom(Input input, DBStageRecord message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.stageId = input.readInt32();
                        break;
                    case 2:
                        message.star = input.readInt32();
                        break;
                    case 3:
                        message.attackCount = input.readInt32();
                        break;
                    case 4:
                        message.lastAttackTime = input.readInt32();
                        break;
                    case 5:
                        message.resetCount = input.readInt32();
                        break;
                    case 6:
                        message.lastResetTime = input.readInt32();
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, DBStageRecord message) throws IOException
        {
            if(message.stageId == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(1, message.stageId, false);

            if(message.star != null)
                output.writeInt32(2, message.star, false);

            if(message.attackCount != null)
                output.writeInt32(3, message.attackCount, false);

            if(message.lastAttackTime != null)
                output.writeInt32(4, message.lastAttackTime, false);

            if(message.resetCount != null)
                output.writeInt32(5, message.resetCount, false);

            if(message.lastResetTime != null)
                output.writeInt32(6, message.lastResetTime, false);
        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "stageId";
                case 2: return "star";
                case 3: return "attackCount";
                case 4: return "lastAttackTime";
                case 5: return "resetCount";
                case 6: return "lastResetTime";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("stageId", 1);
            fieldMap.put("star", 2);
            fieldMap.put("attackCount", 3);
            fieldMap.put("lastAttackTime", 4);
            fieldMap.put("resetCount", 5);
            fieldMap.put("lastResetTime", 6);
        }
    };
    
}
