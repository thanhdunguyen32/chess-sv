// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protostuff

package game.module.db.bean;


import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

import io.protostuff.UninitializedMessageException;
public final class DBFriendBuildingItem implements Externalizable, Message<DBFriendBuildingItem>
{

    public static Schema<DBFriendBuildingItem> getSchema()
    {
        return SCHEMA;
    }

    public static DBFriendBuildingItem getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final DBFriendBuildingItem DEFAULT_INSTANCE = new DBFriendBuildingItem();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    Integer buildingType;
    Integer buildingLevel;
    Long upgradeTime;
    Long buildTime;
    Long rewardTime;

    public DBFriendBuildingItem()
    {

    }

    public DBFriendBuildingItem(
        Integer buildingType,
        Integer buildingLevel,
        Long upgradeTime,
        Long buildTime,
        Long rewardTime
    )
    {
        this.buildingType = buildingType;
        this.buildingLevel = buildingLevel;
        this.upgradeTime = upgradeTime;
        this.buildTime = buildTime;
        this.rewardTime = rewardTime;
    }

    // getters and setters

    // buildingType

    public Integer getBuildingType()
    {
        return buildingType;
    }


    public void setBuildingType(Integer buildingType)
    {
        this.buildingType = buildingType;
    }

    // buildingLevel

    public Integer getBuildingLevel()
    {
        return buildingLevel;
    }


    public void setBuildingLevel(Integer buildingLevel)
    {
        this.buildingLevel = buildingLevel;
    }

    // upgradeTime

    public Long getUpgradeTime()
    {
        return upgradeTime;
    }


    public void setUpgradeTime(Long upgradeTime)
    {
        this.upgradeTime = upgradeTime;
    }

    // buildTime

    public Long getBuildTime()
    {
        return buildTime;
    }


    public void setBuildTime(Long buildTime)
    {
        this.buildTime = buildTime;
    }

    // rewardTime

    public Long getRewardTime()
    {
        return rewardTime;
    }


    public void setRewardTime(Long rewardTime)
    {
        this.rewardTime = rewardTime;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<DBFriendBuildingItem> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<DBFriendBuildingItem> SCHEMA = new Schema<DBFriendBuildingItem>()
    {
        // schema methods

        public DBFriendBuildingItem newMessage()
        {
            return new DBFriendBuildingItem();
        }

        public Class<DBFriendBuildingItem> typeClass()
        {
            return DBFriendBuildingItem.class;
        }

        public String messageName()
        {
            return DBFriendBuildingItem.class.getSimpleName();
        }

        public String messageFullName()
        {
            return DBFriendBuildingItem.class.getName();
        }

        public boolean isInitialized(DBFriendBuildingItem message)
        {
            return 
                message.buildingType != null 
                && message.buildingLevel != null 
                && message.upgradeTime != null 
                && message.buildTime != null 
                && message.rewardTime != null;
        }

        public void mergeFrom(Input input, DBFriendBuildingItem message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.buildingType = input.readInt32();
                        break;
                    case 2:
                        message.buildingLevel = input.readInt32();
                        break;
                    case 3:
                        message.upgradeTime = input.readInt64();
                        break;
                    case 4:
                        message.buildTime = input.readInt64();
                        break;
                    case 5:
                        message.rewardTime = input.readInt64();
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, DBFriendBuildingItem message) throws IOException
        {
            if(message.buildingType == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(1, message.buildingType, false);

            if(message.buildingLevel == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(2, message.buildingLevel, false);

            if(message.upgradeTime == null)
                throw new UninitializedMessageException(message);
            output.writeInt64(3, message.upgradeTime, false);

            if(message.buildTime == null)
                throw new UninitializedMessageException(message);
            output.writeInt64(4, message.buildTime, false);

            if(message.rewardTime == null)
                throw new UninitializedMessageException(message);
            output.writeInt64(5, message.rewardTime, false);
        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "buildingType";
                case 2: return "buildingLevel";
                case 3: return "upgradeTime";
                case 4: return "buildTime";
                case 5: return "rewardTime";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("buildingType", 1);
            fieldMap.put("buildingLevel", 2);
            fieldMap.put("upgradeTime", 3);
            fieldMap.put("buildTime", 4);
            fieldMap.put("rewardTime", 5);
        }
    };
    
}
