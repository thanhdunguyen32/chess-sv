// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protostuff

package game.module.db.bean;


import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

import io.protostuff.UninitializedMessageException;
public final class DBFriendHelpItem implements Externalizable, Message<DBFriendHelpItem>
{

    public static Schema<DBFriendHelpItem> getSchema()
    {
        return SCHEMA;
    }

    public static DBFriendHelpItem getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final DBFriendHelpItem DEFAULT_INSTANCE = new DBFriendHelpItem();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    Long uuid;
    Integer type;
    Integer playerId;
    Integer materialId;
    Integer sumCount;
    Integer leftCount;
    Long timestamp;
       Integer senderId;

    public DBFriendHelpItem()
    {

    }

    public DBFriendHelpItem(
        Long uuid,
        Integer type,
        Integer playerId,
        Integer materialId,
        Integer sumCount,
        Integer leftCount,
        Long timestamp
    )
    {
        this.uuid = uuid;
        this.type = type;
        this.playerId = playerId;
        this.materialId = materialId;
        this.sumCount = sumCount;
        this.leftCount = leftCount;
        this.timestamp = timestamp;
    }

    // getters and setters

    // uuid

    public Long getUuid()
    {
        return uuid;
    }


    public void setUuid(Long uuid)
    {
        this.uuid = uuid;
    }

    // type

    public Integer getType()
    {
        return type;
    }


    public void setType(Integer type)
    {
        this.type = type;
    }

    // playerId

    public Integer getPlayerId()
    {
        return playerId;
    }


    public void setPlayerId(Integer playerId)
    {
        this.playerId = playerId;
    }

    // materialId

    public Integer getMaterialId()
    {
        return materialId;
    }


    public void setMaterialId(Integer materialId)
    {
        this.materialId = materialId;
    }

    // sumCount

    public Integer getSumCount()
    {
        return sumCount;
    }


    public void setSumCount(Integer sumCount)
    {
        this.sumCount = sumCount;
    }

    // leftCount

    public Integer getLeftCount()
    {
        return leftCount;
    }


    public void setLeftCount(Integer leftCount)
    {
        this.leftCount = leftCount;
    }

    // timestamp

    public Long getTimestamp()
    {
        return timestamp;
    }


    public void setTimestamp(Long timestamp)
    {
        this.timestamp = timestamp;
    }

    // senderId

    public Integer getSenderId()
    {
        return senderId;
    }


    public void setSenderId(Integer senderId)
    {
        this.senderId = senderId;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<DBFriendHelpItem> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<DBFriendHelpItem> SCHEMA = new Schema<DBFriendHelpItem>()
    {
        // schema methods

        public DBFriendHelpItem newMessage()
        {
            return new DBFriendHelpItem();
        }

        public Class<DBFriendHelpItem> typeClass()
        {
            return DBFriendHelpItem.class;
        }

        public String messageName()
        {
            return DBFriendHelpItem.class.getSimpleName();
        }

        public String messageFullName()
        {
            return DBFriendHelpItem.class.getName();
        }

        public boolean isInitialized(DBFriendHelpItem message)
        {
            return 
                message.uuid != null 
                && message.type != null 
                && message.playerId != null 
                && message.materialId != null 
                && message.sumCount != null 
                && message.leftCount != null 
                && message.timestamp != null;
        }

        public void mergeFrom(Input input, DBFriendHelpItem message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.uuid = input.readInt64();
                        break;
                    case 2:
                        message.type = input.readInt32();
                        break;
                    case 3:
                        message.playerId = input.readInt32();
                        break;
                    case 4:
                        message.materialId = input.readInt32();
                        break;
                    case 5:
                        message.sumCount = input.readInt32();
                        break;
                    case 6:
                        message.leftCount = input.readInt32();
                        break;
                    case 7:
                        message.timestamp = input.readInt64();
                        break;
                    case 8:
                        message.senderId = input.readInt32();
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, DBFriendHelpItem message) throws IOException
        {
            if(message.uuid == null)
                throw new UninitializedMessageException(message);
            output.writeInt64(1, message.uuid, false);

            if(message.type == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(2, message.type, false);

            if(message.playerId == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(3, message.playerId, false);

            if(message.materialId == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(4, message.materialId, false);

            if(message.sumCount == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(5, message.sumCount, false);

            if(message.leftCount == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(6, message.leftCount, false);

            if(message.timestamp == null)
                throw new UninitializedMessageException(message);
            output.writeInt64(7, message.timestamp, false);

            if(message.senderId != null)
                output.writeInt32(8, message.senderId, false);
        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "uuid";
                case 2: return "type";
                case 3: return "playerId";
                case 4: return "materialId";
                case 5: return "sumCount";
                case 6: return "leftCount";
                case 7: return "timestamp";
                case 8: return "senderId";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("uuid", 1);
            fieldMap.put("type", 2);
            fieldMap.put("playerId", 3);
            fieldMap.put("materialId", 4);
            fieldMap.put("sumCount", 5);
            fieldMap.put("leftCount", 6);
            fieldMap.put("timestamp", 7);
            fieldMap.put("senderId", 8);
        }
    };
    
}
