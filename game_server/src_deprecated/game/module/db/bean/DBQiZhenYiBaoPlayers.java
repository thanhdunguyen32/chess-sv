// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protostuff

package game.module.db.bean;


import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

import io.protostuff.UninitializedMessageException;
public final class DBQiZhenYiBaoPlayers implements Externalizable, Message<DBQiZhenYiBaoPlayers>
{

    public static Schema<DBQiZhenYiBaoPlayers> getSchema()
    {
        return SCHEMA;
    }

    public static DBQiZhenYiBaoPlayers getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final DBQiZhenYiBaoPlayers DEFAULT_INSTANCE = new DBQiZhenYiBaoPlayers();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    Integer currentCount;
    List<DBQZYBPlayer1> playerJoin;
    List<String> kaiJiangPlayer;

    public DBQiZhenYiBaoPlayers()
    {

    }

    public DBQiZhenYiBaoPlayers(
        Integer currentCount
    )
    {
        this.currentCount = currentCount;
    }

    // getters and setters

    // currentCount

    public Integer getCurrentCount()
    {
        return currentCount;
    }


    public void setCurrentCount(Integer currentCount)
    {
        this.currentCount = currentCount;
    }

    // playerJoin

    public List<DBQZYBPlayer1> getPlayerJoinList()
    {
        return playerJoin;
    }


    public void setPlayerJoinList(List<DBQZYBPlayer1> playerJoin)
    {
        this.playerJoin = playerJoin;
    }

    // kaiJiangPlayer

    public List<String> getKaiJiangPlayerList()
    {
        return kaiJiangPlayer;
    }


    public void setKaiJiangPlayerList(List<String> kaiJiangPlayer)
    {
        this.kaiJiangPlayer = kaiJiangPlayer;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<DBQiZhenYiBaoPlayers> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<DBQiZhenYiBaoPlayers> SCHEMA = new Schema<DBQiZhenYiBaoPlayers>()
    {
        // schema methods

        public DBQiZhenYiBaoPlayers newMessage()
        {
            return new DBQiZhenYiBaoPlayers();
        }

        public Class<DBQiZhenYiBaoPlayers> typeClass()
        {
            return DBQiZhenYiBaoPlayers.class;
        }

        public String messageName()
        {
            return DBQiZhenYiBaoPlayers.class.getSimpleName();
        }

        public String messageFullName()
        {
            return DBQiZhenYiBaoPlayers.class.getName();
        }

        public boolean isInitialized(DBQiZhenYiBaoPlayers message)
        {
            return 
                message.currentCount != null;
        }

        public void mergeFrom(Input input, DBQiZhenYiBaoPlayers message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.currentCount = input.readInt32();
                        break;
                    case 2:
                        if(message.playerJoin == null)
                            message.playerJoin = new ArrayList<DBQZYBPlayer1>();
                        message.playerJoin.add(input.mergeObject(null, DBQZYBPlayer1.getSchema()));
                        break;

                    case 3:
                        if(message.kaiJiangPlayer == null)
                            message.kaiJiangPlayer = new ArrayList<String>();
                        message.kaiJiangPlayer.add(input.readString());break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, DBQiZhenYiBaoPlayers message) throws IOException
        {
            if(message.currentCount == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(1, message.currentCount, false);

            if(message.playerJoin != null)
            {
                for(DBQZYBPlayer1 playerJoin : message.playerJoin)
                {
                    if(playerJoin != null)
                        output.writeObject(2, playerJoin, DBQZYBPlayer1.getSchema(), true);
                }
            }


            if(message.kaiJiangPlayer != null)
            {
                for(String kaiJiangPlayer : message.kaiJiangPlayer)
                {
                    if(kaiJiangPlayer != null)
                        output.writeString(3, kaiJiangPlayer, true);
                }
            }
        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "currentCount";
                case 2: return "playerJoin";
                case 3: return "kaiJiangPlayer";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("currentCount", 1);
            fieldMap.put("playerJoin", 2);
            fieldMap.put("kaiJiangPlayer", 3);
        }
    };
    
}
