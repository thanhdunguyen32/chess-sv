// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protostuff

package game.module.rank.bean;


import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;


public final class DBRankBattleForce implements Externalizable, Message<DBRankBattleForce>
{

    public static Schema<DBRankBattleForce> getSchema()
    {
        return SCHEMA;
    }

    public static DBRankBattleForce getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final DBRankBattleForce DEFAULT_INSTANCE = new DBRankBattleForce();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    List<DBRankBattleForce1> rankItem;
    List<DBRankMyItem> rankMy;

    public DBRankBattleForce()
    {

    }

    // getters and setters

    // rankItem

    public List<DBRankBattleForce1> getRankItemList()
    {
        return rankItem;
    }


    public void setRankItemList(List<DBRankBattleForce1> rankItem)
    {
        this.rankItem = rankItem;
    }

    // rankMy

    public List<DBRankMyItem> getRankMyList()
    {
        return rankMy;
    }


    public void setRankMyList(List<DBRankMyItem> rankMy)
    {
        this.rankMy = rankMy;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<DBRankBattleForce> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<DBRankBattleForce> SCHEMA = new Schema<DBRankBattleForce>()
    {
        // schema methods

        public DBRankBattleForce newMessage()
        {
            return new DBRankBattleForce();
        }

        public Class<DBRankBattleForce> typeClass()
        {
            return DBRankBattleForce.class;
        }

        public String messageName()
        {
            return DBRankBattleForce.class.getSimpleName();
        }

        public String messageFullName()
        {
            return DBRankBattleForce.class.getName();
        }

        public boolean isInitialized(DBRankBattleForce message)
        {
            return true;
        }

        public void mergeFrom(Input input, DBRankBattleForce message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        if(message.rankItem == null)
                            message.rankItem = new ArrayList<DBRankBattleForce1>();
                        message.rankItem.add(input.mergeObject(null, DBRankBattleForce1.getSchema()));
                        break;

                    case 2:
                        if(message.rankMy == null)
                            message.rankMy = new ArrayList<DBRankMyItem>();
                        message.rankMy.add(input.mergeObject(null, DBRankMyItem.getSchema()));
                        break;

                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, DBRankBattleForce message) throws IOException
        {
            if(message.rankItem != null)
            {
                for(DBRankBattleForce1 rankItem : message.rankItem)
                {
                    if(rankItem != null)
                        output.writeObject(1, rankItem, DBRankBattleForce1.getSchema(), true);
                }
            }


            if(message.rankMy != null)
            {
                for(DBRankMyItem rankMy : message.rankMy)
                {
                    if(rankMy != null)
                        output.writeObject(2, rankMy, DBRankMyItem.getSchema(), true);
                }
            }

        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "rankItem";
                case 2: return "rankMy";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("rankItem", 1);
            fieldMap.put("rankMy", 2);
        }
    };
    
}
