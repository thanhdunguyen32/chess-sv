// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protostuff

package game.module.activity.bean;

import javax.annotation.Generated;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

import io.protostuff.UninitializedMessageException;
@Generated("java_bean")
public final class ActivityConfigHeroLiBao implements Externalizable, Message<ActivityConfigHeroLiBao>
{

    public static Schema<ActivityConfigHeroLiBao> getSchema()
    {
        return SCHEMA;
    }

    public static ActivityConfigHeroLiBao getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final ActivityConfigHeroLiBao DEFAULT_INSTANCE = new ActivityConfigHeroLiBao();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    Integer buyCount;
    Integer favorRate;
    Integer price;
    Integer rechargeId;
    List<Award> award;

    public ActivityConfigHeroLiBao()
    {

    }

    public ActivityConfigHeroLiBao(
        Integer buyCount,
        Integer favorRate,
        Integer price,
        Integer rechargeId
    )
    {
        this.buyCount = buyCount;
        this.favorRate = favorRate;
        this.price = price;
        this.rechargeId = rechargeId;
    }

    // getters and setters

    // buyCount

    public Integer getBuyCount()
    {
        return buyCount;
    }


    public void setBuyCount(Integer buyCount)
    {
        this.buyCount = buyCount;
    }

    // favorRate

    public Integer getFavorRate()
    {
        return favorRate;
    }


    public void setFavorRate(Integer favorRate)
    {
        this.favorRate = favorRate;
    }

    // price

    public Integer getPrice()
    {
        return price;
    }


    public void setPrice(Integer price)
    {
        this.price = price;
    }

    // rechargeId

    public Integer getRechargeId()
    {
        return rechargeId;
    }


    public void setRechargeId(Integer rechargeId)
    {
        this.rechargeId = rechargeId;
    }

    // award

    public List<Award> getAwardList()
    {
        return award;
    }


    public void setAwardList(List<Award> award)
    {
        this.award = award;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<ActivityConfigHeroLiBao> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<ActivityConfigHeroLiBao> SCHEMA = new Schema<ActivityConfigHeroLiBao>()
    {
        // schema methods

        public ActivityConfigHeroLiBao newMessage()
        {
            return new ActivityConfigHeroLiBao();
        }

        public Class<ActivityConfigHeroLiBao> typeClass()
        {
            return ActivityConfigHeroLiBao.class;
        }

        public String messageName()
        {
            return ActivityConfigHeroLiBao.class.getSimpleName();
        }

        public String messageFullName()
        {
            return ActivityConfigHeroLiBao.class.getName();
        }

        public boolean isInitialized(ActivityConfigHeroLiBao message)
        {
            return 
                message.buyCount != null 
                && message.favorRate != null 
                && message.price != null 
                && message.rechargeId != null;
        }

        public void mergeFrom(Input input, ActivityConfigHeroLiBao message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.buyCount = input.readInt32();
                        break;
                    case 2:
                        message.favorRate = input.readInt32();
                        break;
                    case 3:
                        message.price = input.readInt32();
                        break;
                    case 4:
                        message.rechargeId = input.readInt32();
                        break;
                    case 5:
                        if(message.award == null)
                            message.award = new ArrayList<Award>();
                        message.award.add(input.mergeObject(null, Award.getSchema()));
                        break;

                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, ActivityConfigHeroLiBao message) throws IOException
        {
            if(message.buyCount == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(1, message.buyCount, false);

            if(message.favorRate == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(2, message.favorRate, false);

            if(message.price == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(3, message.price, false);

            if(message.rechargeId == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(4, message.rechargeId, false);

            if(message.award != null)
            {
                for(Award award : message.award)
                {
                    if(award != null)
                        output.writeObject(5, award, Award.getSchema(), true);
                }
            }

        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "buyCount";
                case 2: return "favorRate";
                case 3: return "price";
                case 4: return "rechargeId";
                case 5: return "award";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("buyCount", 1);
            fieldMap.put("favorRate", 2);
            fieldMap.put("price", 3);
            fieldMap.put("rechargeId", 4);
            fieldMap.put("award", 5);
        }
    };
    
}
