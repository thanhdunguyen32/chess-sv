// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protostuff

package game.module.activity.bean;

import javax.annotation.Generated;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

import io.protostuff.UninitializedMessageException;
@Generated("java_bean")
public final class ActivityConfigQCJJ implements Externalizable, Message<ActivityConfigQCJJ>
{

    public static Schema<ActivityConfigQCJJ> getSchema()
    {
        return SCHEMA;
    }

    public static ActivityConfigQCJJ getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final ActivityConfigQCJJ DEFAULT_INSTANCE = new ActivityConfigQCJJ();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    Integer buyCount;
    Integer price;
    Integer totalValue;
    Integer rechargeId;
    Integer extraDiamond;
    List<Award> award;

    public ActivityConfigQCJJ()
    {

    }

    public ActivityConfigQCJJ(
        Integer buyCount,
        Integer price,
        Integer totalValue,
        Integer rechargeId,
        Integer extraDiamond
    )
    {
        this.buyCount = buyCount;
        this.price = price;
        this.totalValue = totalValue;
        this.rechargeId = rechargeId;
        this.extraDiamond = extraDiamond;
    }

    // getters and setters

    // buyCount

    public Integer getBuyCount()
    {
        return buyCount;
    }


    public void setBuyCount(Integer buyCount)
    {
        this.buyCount = buyCount;
    }

    // price

    public Integer getPrice()
    {
        return price;
    }


    public void setPrice(Integer price)
    {
        this.price = price;
    }

    // totalValue

    public Integer getTotalValue()
    {
        return totalValue;
    }


    public void setTotalValue(Integer totalValue)
    {
        this.totalValue = totalValue;
    }

    // rechargeId

    public Integer getRechargeId()
    {
        return rechargeId;
    }


    public void setRechargeId(Integer rechargeId)
    {
        this.rechargeId = rechargeId;
    }

    // extraDiamond

    public Integer getExtraDiamond()
    {
        return extraDiamond;
    }


    public void setExtraDiamond(Integer extraDiamond)
    {
        this.extraDiamond = extraDiamond;
    }

    // award

    public List<Award> getAwardList()
    {
        return award;
    }


    public void setAwardList(List<Award> award)
    {
        this.award = award;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<ActivityConfigQCJJ> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<ActivityConfigQCJJ> SCHEMA = new Schema<ActivityConfigQCJJ>()
    {
        // schema methods

        public ActivityConfigQCJJ newMessage()
        {
            return new ActivityConfigQCJJ();
        }

        public Class<ActivityConfigQCJJ> typeClass()
        {
            return ActivityConfigQCJJ.class;
        }

        public String messageName()
        {
            return ActivityConfigQCJJ.class.getSimpleName();
        }

        public String messageFullName()
        {
            return ActivityConfigQCJJ.class.getName();
        }

        public boolean isInitialized(ActivityConfigQCJJ message)
        {
            return 
                message.buyCount != null 
                && message.price != null 
                && message.totalValue != null 
                && message.rechargeId != null 
                && message.extraDiamond != null;
        }

        public void mergeFrom(Input input, ActivityConfigQCJJ message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.buyCount = input.readInt32();
                        break;
                    case 2:
                        message.price = input.readInt32();
                        break;
                    case 3:
                        message.totalValue = input.readInt32();
                        break;
                    case 4:
                        message.rechargeId = input.readInt32();
                        break;
                    case 5:
                        message.extraDiamond = input.readInt32();
                        break;
                    case 6:
                        if(message.award == null)
                            message.award = new ArrayList<Award>();
                        message.award.add(input.mergeObject(null, Award.getSchema()));
                        break;

                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, ActivityConfigQCJJ message) throws IOException
        {
            if(message.buyCount == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(1, message.buyCount, false);

            if(message.price == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(2, message.price, false);

            if(message.totalValue == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(3, message.totalValue, false);

            if(message.rechargeId == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(4, message.rechargeId, false);

            if(message.extraDiamond == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(5, message.extraDiamond, false);

            if(message.award != null)
            {
                for(Award award : message.award)
                {
                    if(award != null)
                        output.writeObject(6, award, Award.getSchema(), true);
                }
            }

        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "buyCount";
                case 2: return "price";
                case 3: return "totalValue";
                case 4: return "rechargeId";
                case 5: return "extraDiamond";
                case 6: return "award";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("buyCount", 1);
            fieldMap.put("price", 2);
            fieldMap.put("totalValue", 3);
            fieldMap.put("rechargeId", 4);
            fieldMap.put("extraDiamond", 5);
            fieldMap.put("award", 6);
        }
    };
    
}
