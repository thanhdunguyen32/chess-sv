// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protostuff

package game.module.activity.bean;

import javax.annotation.Generated;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

import io.protostuff.UninitializedMessageException;
@Generated("java_bean")
public final class Award implements Externalizable, Message<Award>
{

    public static Schema<Award> getSchema()
    {
        return SCHEMA;
    }

    public static Award getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final Award DEFAULT_INSTANCE = new Award();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    Integer itemId;
    Integer itemCount;

    public Award()
    {

    }

    public Award(
        Integer itemId,
        Integer itemCount
    )
    {
        this.itemId = itemId;
        this.itemCount = itemCount;
    }

    // getters and setters

    // itemId

    public Integer getItemId()
    {
        return itemId;
    }


    public void setItemId(Integer itemId)
    {
        this.itemId = itemId;
    }

    // itemCount

    public Integer getItemCount()
    {
        return itemCount;
    }


    public void setItemCount(Integer itemCount)
    {
        this.itemCount = itemCount;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<Award> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<Award> SCHEMA = new Schema<Award>()
    {
        // schema methods

        public Award newMessage()
        {
            return new Award();
        }

        public Class<Award> typeClass()
        {
            return Award.class;
        }

        public String messageName()
        {
            return Award.class.getSimpleName();
        }

        public String messageFullName()
        {
            return Award.class.getName();
        }

        public boolean isInitialized(Award message)
        {
            return 
                message.itemId != null 
                && message.itemCount != null;
        }

        public void mergeFrom(Input input, Award message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.itemId = input.readInt32();
                        break;
                    case 2:
                        message.itemCount = input.readInt32();
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, Award message) throws IOException
        {
            if(message.itemId == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(1, message.itemId, false);

            if(message.itemCount == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(2, message.itemCount, false);
        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "itemId";
                case 2: return "itemCount";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("itemId", 1);
            fieldMap.put("itemCount", 2);
        }
    };
    
}
