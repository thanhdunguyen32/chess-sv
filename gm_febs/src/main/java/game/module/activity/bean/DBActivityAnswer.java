// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protostuff

package game.module.activity.bean;

import javax.annotation.Generated;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

import io.protostuff.UninitializedMessageException;
@Generated("java_bean")
public final class DBActivityAnswer implements Externalizable, Message<DBActivityAnswer>
{

    public static Schema<DBActivityAnswer> getSchema()
    {
        return SCHEMA;
    }

    public static DBActivityAnswer getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final DBActivityAnswer DEFAULT_INSTANCE = new DBActivityAnswer();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    List<Answer> allAnswerId;
    Integer totalAwardsGetted;

    public DBActivityAnswer()
    {

    }

    public DBActivityAnswer(
        Integer totalAwardsGetted
    )
    {
        this.totalAwardsGetted = totalAwardsGetted;
    }

    // getters and setters

    // allAnswerId

    public List<Answer> getAllAnswerIdList()
    {
        return allAnswerId;
    }


    public void setAllAnswerIdList(List<Answer> allAnswerId)
    {
        this.allAnswerId = allAnswerId;
    }

    // totalAwardsGetted

    public Integer getTotalAwardsGetted()
    {
        return totalAwardsGetted;
    }


    public void setTotalAwardsGetted(Integer totalAwardsGetted)
    {
        this.totalAwardsGetted = totalAwardsGetted;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<DBActivityAnswer> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<DBActivityAnswer> SCHEMA = new Schema<DBActivityAnswer>()
    {
        // schema methods

        public DBActivityAnswer newMessage()
        {
            return new DBActivityAnswer();
        }

        public Class<DBActivityAnswer> typeClass()
        {
            return DBActivityAnswer.class;
        }

        public String messageName()
        {
            return DBActivityAnswer.class.getSimpleName();
        }

        public String messageFullName()
        {
            return DBActivityAnswer.class.getName();
        }

        public boolean isInitialized(DBActivityAnswer message)
        {
            return 
                message.totalAwardsGetted != null;
        }

        public void mergeFrom(Input input, DBActivityAnswer message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        if(message.allAnswerId == null)
                            message.allAnswerId = new ArrayList<Answer>();
                        message.allAnswerId.add(input.mergeObject(null, Answer.getSchema()));
                        break;

                    case 2:
                        message.totalAwardsGetted = input.readInt32();
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, DBActivityAnswer message) throws IOException
        {
            if(message.allAnswerId != null)
            {
                for(Answer allAnswerId : message.allAnswerId)
                {
                    if(allAnswerId != null)
                        output.writeObject(1, allAnswerId, Answer.getSchema(), true);
                }
            }


            if(message.totalAwardsGetted == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(2, message.totalAwardsGetted, false);
        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "allAnswerId";
                case 2: return "totalAwardsGetted";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("allAnswerId", 1);
            fieldMap.put("totalAwardsGetted", 2);
        }
    };
    
}
