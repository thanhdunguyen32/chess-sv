// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protostuff

package game.module.activity.bean;

import javax.annotation.Generated;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

import io.protostuff.UninitializedMessageException;
@Generated("java_bean")
public final class DBActivityLotteryWheel implements Externalizable, Message<DBActivityLotteryWheel>
{

    public static Schema<DBActivityLotteryWheel> getSchema()
    {
        return SCHEMA;
    }

    public static DBActivityLotteryWheel getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final DBActivityLotteryWheel DEFAULT_INSTANCE = new DBActivityLotteryWheel();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    Integer dailyFreeCount;
    Integer dailyPayCount;
    Integer payPrice;
    List<DBActivityLotteryWheelOne> awardItem;

    public DBActivityLotteryWheel()
    {

    }

    public DBActivityLotteryWheel(
        Integer dailyFreeCount,
        Integer dailyPayCount,
        Integer payPrice
    )
    {
        this.dailyFreeCount = dailyFreeCount;
        this.dailyPayCount = dailyPayCount;
        this.payPrice = payPrice;
    }

    // getters and setters

    // dailyFreeCount

    public Integer getDailyFreeCount()
    {
        return dailyFreeCount;
    }


    public void setDailyFreeCount(Integer dailyFreeCount)
    {
        this.dailyFreeCount = dailyFreeCount;
    }

    // dailyPayCount

    public Integer getDailyPayCount()
    {
        return dailyPayCount;
    }


    public void setDailyPayCount(Integer dailyPayCount)
    {
        this.dailyPayCount = dailyPayCount;
    }

    // payPrice

    public Integer getPayPrice()
    {
        return payPrice;
    }


    public void setPayPrice(Integer payPrice)
    {
        this.payPrice = payPrice;
    }

    // awardItem

    public List<DBActivityLotteryWheelOne> getAwardItemList()
    {
        return awardItem;
    }


    public void setAwardItemList(List<DBActivityLotteryWheelOne> awardItem)
    {
        this.awardItem = awardItem;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<DBActivityLotteryWheel> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<DBActivityLotteryWheel> SCHEMA = new Schema<DBActivityLotteryWheel>()
    {
        // schema methods

        public DBActivityLotteryWheel newMessage()
        {
            return new DBActivityLotteryWheel();
        }

        public Class<DBActivityLotteryWheel> typeClass()
        {
            return DBActivityLotteryWheel.class;
        }

        public String messageName()
        {
            return DBActivityLotteryWheel.class.getSimpleName();
        }

        public String messageFullName()
        {
            return DBActivityLotteryWheel.class.getName();
        }

        public boolean isInitialized(DBActivityLotteryWheel message)
        {
            return 
                message.dailyFreeCount != null 
                && message.dailyPayCount != null 
                && message.payPrice != null;
        }

        public void mergeFrom(Input input, DBActivityLotteryWheel message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.dailyFreeCount = input.readInt32();
                        break;
                    case 2:
                        message.dailyPayCount = input.readInt32();
                        break;
                    case 3:
                        message.payPrice = input.readInt32();
                        break;
                    case 4:
                        if(message.awardItem == null)
                            message.awardItem = new ArrayList<DBActivityLotteryWheelOne>();
                        message.awardItem.add(input.mergeObject(null, DBActivityLotteryWheelOne.getSchema()));
                        break;

                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, DBActivityLotteryWheel message) throws IOException
        {
            if(message.dailyFreeCount == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(1, message.dailyFreeCount, false);

            if(message.dailyPayCount == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(2, message.dailyPayCount, false);

            if(message.payPrice == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(3, message.payPrice, false);

            if(message.awardItem != null)
            {
                for(DBActivityLotteryWheelOne awardItem : message.awardItem)
                {
                    if(awardItem != null)
                        output.writeObject(4, awardItem, DBActivityLotteryWheelOne.getSchema(), true);
                }
            }

        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "dailyFreeCount";
                case 2: return "dailyPayCount";
                case 3: return "payPrice";
                case 4: return "awardItem";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("dailyFreeCount", 1);
            fieldMap.put("dailyPayCount", 2);
            fieldMap.put("payPrice", 3);
            fieldMap.put("awardItem", 4);
        }
    };
    
}
