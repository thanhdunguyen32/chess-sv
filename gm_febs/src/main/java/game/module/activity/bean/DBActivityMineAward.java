// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protostuff

package game.module.activity.bean;

import javax.annotation.Generated;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

import io.protostuff.UninitializedMessageException;
@Generated("java_bean")
public final class DBActivityMineAward implements Externalizable, Message<DBActivityMineAward>
{

    public static Schema<DBActivityMineAward> getSchema()
    {
        return SCHEMA;
    }

    public static DBActivityMineAward getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final DBActivityMineAward DEFAULT_INSTANCE = new DBActivityMineAward();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    List<MineAward> mineAward;
    Integer dayCount;

    public DBActivityMineAward()
    {

    }

    public DBActivityMineAward(
        Integer dayCount
    )
    {
        this.dayCount = dayCount;
    }

    // getters and setters

    // mineAward

    public List<MineAward> getMineAwardList()
    {
        return mineAward;
    }


    public void setMineAwardList(List<MineAward> mineAward)
    {
        this.mineAward = mineAward;
    }

    // dayCount

    public Integer getDayCount()
    {
        return dayCount;
    }


    public void setDayCount(Integer dayCount)
    {
        this.dayCount = dayCount;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<DBActivityMineAward> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<DBActivityMineAward> SCHEMA = new Schema<DBActivityMineAward>()
    {
        // schema methods

        public DBActivityMineAward newMessage()
        {
            return new DBActivityMineAward();
        }

        public Class<DBActivityMineAward> typeClass()
        {
            return DBActivityMineAward.class;
        }

        public String messageName()
        {
            return DBActivityMineAward.class.getSimpleName();
        }

        public String messageFullName()
        {
            return DBActivityMineAward.class.getName();
        }

        public boolean isInitialized(DBActivityMineAward message)
        {
            return 
                message.dayCount != null;
        }

        public void mergeFrom(Input input, DBActivityMineAward message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        if(message.mineAward == null)
                            message.mineAward = new ArrayList<MineAward>();
                        message.mineAward.add(input.mergeObject(null, MineAward.getSchema()));
                        break;

                    case 2:
                        message.dayCount = input.readInt32();
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, DBActivityMineAward message) throws IOException
        {
            if(message.mineAward != null)
            {
                for(MineAward mineAward : message.mineAward)
                {
                    if(mineAward != null)
                        output.writeObject(1, mineAward, MineAward.getSchema(), true);
                }
            }


            if(message.dayCount == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(2, message.dayCount, false);
        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "mineAward";
                case 2: return "dayCount";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("mineAward", 1);
            fieldMap.put("dayCount", 2);
        }
    };
    
}
