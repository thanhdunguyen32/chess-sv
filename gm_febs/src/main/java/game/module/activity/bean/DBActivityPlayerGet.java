// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protostuff

package game.module.activity.bean;

import javax.annotation.Generated;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

@Generated("java_bean")
public final class DBActivityPlayerGet implements Externalizable, Message<DBActivityPlayerGet>
{

    public static Schema<DBActivityPlayerGet> getSchema()
    {
        return SCHEMA;
    }

    public static DBActivityPlayerGet getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final DBActivityPlayerGet DEFAULT_INSTANCE = new DBActivityPlayerGet();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    List<Integer> level;
       Long lastLoginTime;
    List<Integer> vipLevel;

    public DBActivityPlayerGet()
    {

    }

    // getters and setters

    // level

    public List<Integer> getLevelList()
    {
        return level;
    }


    public void setLevelList(List<Integer> level)
    {
        this.level = level;
    }

    // lastLoginTime

    public Long getLastLoginTime()
    {
        return lastLoginTime;
    }


    public void setLastLoginTime(Long lastLoginTime)
    {
        this.lastLoginTime = lastLoginTime;
    }

    // vipLevel

    public List<Integer> getVipLevelList()
    {
        return vipLevel;
    }


    public void setVipLevelList(List<Integer> vipLevel)
    {
        this.vipLevel = vipLevel;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<DBActivityPlayerGet> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<DBActivityPlayerGet> SCHEMA = new Schema<DBActivityPlayerGet>()
    {
        // schema methods

        public DBActivityPlayerGet newMessage()
        {
            return new DBActivityPlayerGet();
        }

        public Class<DBActivityPlayerGet> typeClass()
        {
            return DBActivityPlayerGet.class;
        }

        public String messageName()
        {
            return DBActivityPlayerGet.class.getSimpleName();
        }

        public String messageFullName()
        {
            return DBActivityPlayerGet.class.getName();
        }

        public boolean isInitialized(DBActivityPlayerGet message)
        {
            return true;
        }

        public void mergeFrom(Input input, DBActivityPlayerGet message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        if(message.level == null)
                            message.level = new ArrayList<Integer>();
                        message.level.add(input.readInt32());break;
                    case 2:
                        message.lastLoginTime = input.readInt64();
                        break;
                    case 3:
                        if(message.vipLevel == null)
                            message.vipLevel = new ArrayList<Integer>();
                        message.vipLevel.add(input.readInt32());break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, DBActivityPlayerGet message) throws IOException
        {
            if(message.level != null)
            {
                for(Integer level : message.level)
                {
                    if(level != null)
                        output.writeInt32(1, level, true);
                }
            }

            if(message.lastLoginTime != null)
                output.writeInt64(2, message.lastLoginTime, false);

            if(message.vipLevel != null)
            {
                for(Integer vipLevel : message.vipLevel)
                {
                    if(vipLevel != null)
                        output.writeInt32(3, vipLevel, true);
                }
            }
        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "level";
                case 2: return "lastLoginTime";
                case 3: return "vipLevel";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("level", 1);
            fieldMap.put("lastLoginTime", 2);
            fieldMap.put("vipLevel", 3);
        }
    };
    
}
