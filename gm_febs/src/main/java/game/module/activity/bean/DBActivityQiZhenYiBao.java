// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protostuff

package game.module.activity.bean;

import javax.annotation.Generated;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

import io.protostuff.UninitializedMessageException;
@Generated("java_bean")
public final class DBActivityQiZhenYiBao implements Externalizable, Message<DBActivityQiZhenYiBao>
{

    public static Schema<DBActivityQiZhenYiBao> getSchema()
    {
        return SCHEMA;
    }

    public static DBActivityQiZhenYiBao getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final DBActivityQiZhenYiBao DEFAULT_INSTANCE = new DBActivityQiZhenYiBao();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    Integer playerCount;
    Integer costDiamond;
    Integer bigAwardValue;
    List<Award> fixedAward;
    Award bigAward;

    public DBActivityQiZhenYiBao()
    {

    }

    public DBActivityQiZhenYiBao(
        Integer playerCount,
        Integer costDiamond,
        Integer bigAwardValue,
        Award bigAward
    )
    {
        this.playerCount = playerCount;
        this.costDiamond = costDiamond;
        this.bigAwardValue = bigAwardValue;
        this.bigAward = bigAward;
    }

    // getters and setters

    // playerCount

    public Integer getPlayerCount()
    {
        return playerCount;
    }


    public void setPlayerCount(Integer playerCount)
    {
        this.playerCount = playerCount;
    }

    // costDiamond

    public Integer getCostDiamond()
    {
        return costDiamond;
    }


    public void setCostDiamond(Integer costDiamond)
    {
        this.costDiamond = costDiamond;
    }

    // bigAwardValue

    public Integer getBigAwardValue()
    {
        return bigAwardValue;
    }


    public void setBigAwardValue(Integer bigAwardValue)
    {
        this.bigAwardValue = bigAwardValue;
    }

    // fixedAward

    public List<Award> getFixedAwardList()
    {
        return fixedAward;
    }


    public void setFixedAwardList(List<Award> fixedAward)
    {
        this.fixedAward = fixedAward;
    }

    // bigAward

    public Award getBigAward()
    {
        return bigAward;
    }


    public void setBigAward(Award bigAward)
    {
        this.bigAward = bigAward;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<DBActivityQiZhenYiBao> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<DBActivityQiZhenYiBao> SCHEMA = new Schema<DBActivityQiZhenYiBao>()
    {
        // schema methods

        public DBActivityQiZhenYiBao newMessage()
        {
            return new DBActivityQiZhenYiBao();
        }

        public Class<DBActivityQiZhenYiBao> typeClass()
        {
            return DBActivityQiZhenYiBao.class;
        }

        public String messageName()
        {
            return DBActivityQiZhenYiBao.class.getSimpleName();
        }

        public String messageFullName()
        {
            return DBActivityQiZhenYiBao.class.getName();
        }

        public boolean isInitialized(DBActivityQiZhenYiBao message)
        {
            return 
                message.playerCount != null 
                && message.costDiamond != null 
                && message.bigAwardValue != null 
                && message.bigAward != null;
        }

        public void mergeFrom(Input input, DBActivityQiZhenYiBao message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.playerCount = input.readInt32();
                        break;
                    case 2:
                        message.costDiamond = input.readInt32();
                        break;
                    case 3:
                        message.bigAwardValue = input.readInt32();
                        break;
                    case 4:
                        if(message.fixedAward == null)
                            message.fixedAward = new ArrayList<Award>();
                        message.fixedAward.add(input.mergeObject(null, Award.getSchema()));
                        break;

                    case 5:
                        message.bigAward = input.mergeObject(message.bigAward, Award.getSchema());
                        break;

                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, DBActivityQiZhenYiBao message) throws IOException
        {
            if(message.playerCount == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(1, message.playerCount, false);

            if(message.costDiamond == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(2, message.costDiamond, false);

            if(message.bigAwardValue == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(3, message.bigAwardValue, false);

            if(message.fixedAward != null)
            {
                for(Award fixedAward : message.fixedAward)
                {
                    if(fixedAward != null)
                        output.writeObject(4, fixedAward, Award.getSchema(), true);
                }
            }


            if(message.bigAward == null)
                throw new UninitializedMessageException(message);
            output.writeObject(5, message.bigAward, Award.getSchema(), false);

        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "playerCount";
                case 2: return "costDiamond";
                case 3: return "bigAwardValue";
                case 4: return "fixedAward";
                case 5: return "bigAward";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("playerCount", 1);
            fieldMap.put("costDiamond", 2);
            fieldMap.put("bigAwardValue", 3);
            fieldMap.put("fixedAward", 4);
            fieldMap.put("bigAward", 5);
        }
    };
    
}
