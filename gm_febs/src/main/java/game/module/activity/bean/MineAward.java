// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protostuff

package game.module.activity.bean;

import javax.annotation.Generated;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

import io.protostuff.UninitializedMessageException;
@Generated("java_bean")
public final class MineAward implements Externalizable, Message<MineAward>
{

    public static Schema<MineAward> getSchema()
    {
        return SCHEMA;
    }

    public static MineAward getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final MineAward DEFAULT_INSTANCE = new MineAward();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    Integer count;
    Integer costDiamond;
    Integer awardDiamond1;
    Integer awardDiamond2;

    public MineAward()
    {

    }

    public MineAward(
        Integer count,
        Integer costDiamond,
        Integer awardDiamond1,
        Integer awardDiamond2
    )
    {
        this.count = count;
        this.costDiamond = costDiamond;
        this.awardDiamond1 = awardDiamond1;
        this.awardDiamond2 = awardDiamond2;
    }

    // getters and setters

    // count

    public Integer getCount()
    {
        return count;
    }


    public void setCount(Integer count)
    {
        this.count = count;
    }

    // costDiamond

    public Integer getCostDiamond()
    {
        return costDiamond;
    }


    public void setCostDiamond(Integer costDiamond)
    {
        this.costDiamond = costDiamond;
    }

    // awardDiamond1

    public Integer getAwardDiamond1()
    {
        return awardDiamond1;
    }


    public void setAwardDiamond1(Integer awardDiamond1)
    {
        this.awardDiamond1 = awardDiamond1;
    }

    // awardDiamond2

    public Integer getAwardDiamond2()
    {
        return awardDiamond2;
    }


    public void setAwardDiamond2(Integer awardDiamond2)
    {
        this.awardDiamond2 = awardDiamond2;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<MineAward> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<MineAward> SCHEMA = new Schema<MineAward>()
    {
        // schema methods

        public MineAward newMessage()
        {
            return new MineAward();
        }

        public Class<MineAward> typeClass()
        {
            return MineAward.class;
        }

        public String messageName()
        {
            return MineAward.class.getSimpleName();
        }

        public String messageFullName()
        {
            return MineAward.class.getName();
        }

        public boolean isInitialized(MineAward message)
        {
            return 
                message.count != null 
                && message.costDiamond != null 
                && message.awardDiamond1 != null 
                && message.awardDiamond2 != null;
        }

        public void mergeFrom(Input input, MineAward message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.count = input.readInt32();
                        break;
                    case 2:
                        message.costDiamond = input.readInt32();
                        break;
                    case 3:
                        message.awardDiamond1 = input.readInt32();
                        break;
                    case 4:
                        message.awardDiamond2 = input.readInt32();
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, MineAward message) throws IOException
        {
            if(message.count == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(1, message.count, false);

            if(message.costDiamond == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(2, message.costDiamond, false);

            if(message.awardDiamond1 == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(3, message.awardDiamond1, false);

            if(message.awardDiamond2 == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(4, message.awardDiamond2, false);
        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "count";
                case 2: return "costDiamond";
                case 3: return "awardDiamond1";
                case 4: return "awardDiamond2";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("count", 1);
            fieldMap.put("costDiamond", 2);
            fieldMap.put("awardDiamond1", 3);
            fieldMap.put("awardDiamond2", 4);
        }
    };
    
}
